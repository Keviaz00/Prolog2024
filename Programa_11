class GraphCycle
{
    private List<int>[] adj;

    public GraphCycle(int vertices)
    {
        adj = new List<int>[vertices];
        for (int i = 0; i < vertices; i++)
        {
            adj[i] = new List<int>();
        }
    }

    public void AddEdge(int u, int v)
    {
        adj[u].Add(v);
        adj[v].Add(u); // Para un grafo no dirigido
    }

    public bool HasCycle(int start)
    {
        bool[] visited = new bool[adj.Length];
        return HasCycleUtil(start, visited, start, -1);
    }

    private bool HasCycleUtil(int current, bool[] visited, int parent, int depth)
    {
        visited[current] = true;

        foreach (var neighbor in adj[current])
        {
            if (!visited[neighbor])
            {
                if (HasCycleUtil(neighbor, visited, current, depth + 1))
                    return true;
            }
            else if (neighbor != parent) // Si encontramos un vecino que ya fue visitado
            {
                return true; // Hay un ciclo
            }
        }
        return false;
    }
}
