using System.Collections.Generic;

class GraphPath
{
    private List<int>[] adj;

    public GraphPath(int vertices)
    {
        adj = new List<int>[vertices];
        for (int i = 0; i < vertices; i++)
        {
            adj[i] = new List<int>();
        }
    }

    public void AddEdge(int u, int v)
    {
        adj[u].Add(v);
    }

    public List<List<int>> FindAllPaths(int start, int end)
    {
        var paths = new List<List<int>>();
        var visited = new bool[adj.Length];
        var path = new List<int>();
        FindPathsUtil(start, end, visited, path, paths);
        return paths;
    }

    private void FindPathsUtil(int current, int end, bool[] visited, List<int> path, List<List<int>> paths)
    {
        visited[current] = true;
        path.Add(current);

        if (current == end)
        {
            paths.Add(new List<int>(path));
        }
        else
        {
            foreach (var neighbor in adj[current])
            {
                if (!visited[neighbor])
                {
                    FindPathsUtil(neighbor, end, visited, path, paths);
                }
            }
        }

        path.RemoveAt(path.Count - 1);
        visited[current] = false;
    }
}
